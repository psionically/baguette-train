// -----------------------------------------------------------------------------
// C++ header of templatized Hash Table ADT.
// Avoiding collisions using chaining.
// -----------------------------------------------------------------------------
#ifndef HASH_TABLE_H
#define HASH_TABLE_H

#include <iostream>
#include <string>
#include "list_linked.cpp"

using namespace std;

template <class T, class K>
class HashTable{

public:
    HashTable(int initTableSize);
    HashTable(const HashTable& other);
    HashTable& operator =(const HashTable& other);
    ~HashTable();

    bool isEmpty() const;
    void clear();
    bool retrieve(const K& searchKey, T& returnItem) const;
    bool remove(const K& deleteKey);
    void insert(const T& item);
    void showStructure() const;
	
	
private:
	int tableSize;
	List<K>* dataTable;

};

#endif 
